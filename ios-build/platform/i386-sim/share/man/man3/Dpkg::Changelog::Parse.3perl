.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dpkg::Changelog::Parse 3perl"
.TH Dpkg::Changelog::Parse 3perl "2019-03-09" "1.19.5-5-gba009" "libdpkg-perl"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dpkg::Changelog::Parse \- generic changelog parser for dpkg\-parsechangelog
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a set of functions which reproduce all the features
of dpkg-parsechangelog.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .IP "$fields = changelog_parse_debian(%opt)" 4
.el .IP "\f(CW$fields\fR = changelog_parse_debian(%opt)" 4
.IX Item "$fields = changelog_parse_debian(%opt)"
This function is deprecated, use \fBchangelog_parse()\fR instead, with the changelog
format set to \*(L"debian\*(R".
.ie n .IP "$fields = changelog_parse_plugin(%opt)" 4
.el .IP "\f(CW$fields\fR = changelog_parse_plugin(%opt)" 4
.IX Item "$fields = changelog_parse_plugin(%opt)"
This function is deprecated, use \fBchangelog_parse()\fR instead.
.ie n .IP "$fields = changelog_parse(%opt)" 4
.el .IP "\f(CW$fields\fR = changelog_parse(%opt)" 4
.IX Item "$fields = changelog_parse(%opt)"
This function will parse a changelog. In list context, it returns as many
Dpkg::Control objects as the parser did create. In scalar context, it will
return only the first one. If the parser did not return any data, it will
return an empty list in list context or undef on scalar context. If the
parser failed, it will die.
.Sp
The changelog file that is parsed is \fIdebian/changelog\fR by default but it
can be overridden with \f(CW$opt\fR{file}. The default output format is \*(L"dpkg\*(R" but
it can be overridden with \f(CW$opt\fR{format}.
.Sp
The parsing itself is done by a parser module (searched in the standard
perl library directories. That module is named according to the format that
it is able to parse, with the name capitalized. By default it is either
Dpkg::Changelog::Debian (from the \*(L"debian\*(R" format) or the format name looked
up in the 40 last lines of the changelog itself (extracted with this perl
regular expression \*(L"\eschangelog\-format:\es+([0\-9a\-z]+)\eW\*(R"). But it can be
overridden with \f(CW$opt\fR{changelogformat}.
.Sp
If \f(CW$opt\fR{compression} is false, the file will be loaded without compression
support, otherwise by default compression support is disabled if the file
is the default.
.Sp
All the other keys in \f(CW%opt\fR are forwarded to the parser module constructor.
.SH "CHANGES"
.IX Header "CHANGES"
.SS "Version 1.03 (dpkg 1.19.0)"
.IX Subsection "Version 1.03 (dpkg 1.19.0)"
New option: 'compression' in \fBchangelog_parse()\fR.
.SS "Version 1.02 (dpkg 1.18.8)"
.IX Subsection "Version 1.02 (dpkg 1.18.8)"
Deprecated functions: \fBchangelog_parse_debian()\fR, \fBchangelog_parse_plugin()\fR.
.PP
Obsolete options: \f(CW$forceplugin\fR, \f(CW$libdir\fR.
.SS "Version 1.01 (dpkg 1.18.2)"
.IX Subsection "Version 1.01 (dpkg 1.18.2)"
New functions: \fBchangelog_parse_debian()\fR, \fBchangelog_parse_plugin()\fR.
.SS "Version 1.00 (dpkg 1.15.6)"
.IX Subsection "Version 1.00 (dpkg 1.15.6)"
Mark the module as public.
