.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dpkg::Deps::Multiple 3perl"
.TH Dpkg::Deps::Multiple 3perl "2019-03-09" "1.19.5-5-gba009" "libdpkg-perl"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dpkg::Deps::Multiple \- base module to represent multiple dependencies
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Dpkg::Deps::Multiple module provides objects implementing various types
of dependencies. It is the base class for Dpkg::Deps::{\s-1AND,OR\s0,Union}.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$dep = Dpkg::Deps::Multiple\->new(%opts);" 4
.el .IP "\f(CW$dep\fR = Dpkg::Deps::Multiple\->new(%opts);" 4
.IX Item "$dep = Dpkg::Deps::Multiple->new(%opts);"
Creates a new object.
.ie n .IP "$dep\->\fBreset()\fR" 4
.el .IP "\f(CW$dep\fR\->\fBreset()\fR" 4
.IX Item "$dep->reset()"
Clears any dependency information stored in \f(CW$dep\fR so that \f(CW$dep\fR\->\fBis_empty()\fR
returns true.
.ie n .IP "$dep\->add(@deps)" 4
.el .IP "\f(CW$dep\fR\->add(@deps)" 4
.IX Item "$dep->add(@deps)"
Adds new dependency objects at the end of the list.
.ie n .IP "$dep\->\fBget_deps()\fR" 4
.el .IP "\f(CW$dep\fR\->\fBget_deps()\fR" 4
.IX Item "$dep->get_deps()"
Returns a list of sub-dependencies.
.ie n .IP "$dep\->\fBsort()\fR" 4
.el .IP "\f(CW$dep\fR\->\fBsort()\fR" 4
.IX Item "$dep->sort()"
Sorts alphabetically the internal list of dependencies.
.ie n .IP "$dep\->arch_is_concerned($arch)" 4
.el .IP "\f(CW$dep\fR\->arch_is_concerned($arch)" 4
.IX Item "$dep->arch_is_concerned($arch)"
Returns true if at least one of the sub-dependencies apply to this
architecture.
.ie n .IP "$dep\->reduce_arch($arch)" 4
.el .IP "\f(CW$dep\fR\->reduce_arch($arch)" 4
.IX Item "$dep->reduce_arch($arch)"
Simplifies the dependencies to contain only information relevant to the
given architecture. The non-relevant sub-dependencies are simply removed.
.Sp
This trims off the architecture restriction list of Dpkg::Deps::Simple
objects.
.ie n .IP "$dep\->\fBhas_arch_restriction()\fR" 4
.el .IP "\f(CW$dep\fR\->\fBhas_arch_restriction()\fR" 4
.IX Item "$dep->has_arch_restriction()"
Returns the list of package names that have such a restriction.
.ie n .IP "$dep\->\fBprofile_is_concerned()\fR" 4
.el .IP "\f(CW$dep\fR\->\fBprofile_is_concerned()\fR" 4
.IX Item "$dep->profile_is_concerned()"
Returns true if at least one of the sub-dependencies apply to this profile.
.ie n .IP "$dep\->\fBreduce_profiles()\fR" 4
.el .IP "\f(CW$dep\fR\->\fBreduce_profiles()\fR" 4
.IX Item "$dep->reduce_profiles()"
Simplifies the dependencies to contain only information relevant to the
given profile. The non-relevant sub-dependencies are simply removed.
.Sp
This trims off the profile restriction list of Dpkg::Deps::Simple objects.
.ie n .IP "$dep\->\fBis_empty()\fR" 4
.el .IP "\f(CW$dep\fR\->\fBis_empty()\fR" 4
.IX Item "$dep->is_empty()"
Returns true if the dependency is empty and doesn't contain any useful
information. This is true when a (descendant of) Dpkg::Deps::Multiple
contains an empty list of dependencies.
.ie n .IP "$dep\->merge_union($other_dep)" 4
.el .IP "\f(CW$dep\fR\->merge_union($other_dep)" 4
.IX Item "$dep->merge_union($other_dep)"
This method is not meaningful for this object, and will always croak.
.SH "CHANGES"
.IX Header "CHANGES"
.SS "Version 1.02 (dpkg 1.17.10)"
.IX Subsection "Version 1.02 (dpkg 1.17.10)"
New methods: Add \f(CW$dep\fR\->\fBprofile_is_concerned()\fR and \f(CW$dep\fR\->\fBreduce_profiles()\fR.
.SS "Version 1.01 (dpkg 1.16.1)"
.IX Subsection "Version 1.01 (dpkg 1.16.1)"
New method: Add \f(CW$dep\fR\->\fBreset()\fR.
.SS "Version 1.00 (dpkg 1.15.6)"
.IX Subsection "Version 1.00 (dpkg 1.15.6)"
Mark the module as public.
