.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dpkg::Changelog::Entry 3perl"
.TH Dpkg::Changelog::Entry 3perl "2019-03-09" "1.19.5-5-gba009" "libdpkg-perl"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dpkg::Changelog::Entry \- represents a changelog entry
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object represents a changelog entry. It is composed
of a set of lines with specific purpose: an header line, changes lines, a
trailer line. Blank lines can be between those kind of lines.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$entry = Dpkg::Changelog::Entry\->\fBnew()\fR" 4
.el .IP "\f(CW$entry\fR = Dpkg::Changelog::Entry\->\fBnew()\fR" 4
.IX Item "$entry = Dpkg::Changelog::Entry->new()"
Creates a new object. It doesn't represent a real changelog entry
until one has been successfully parsed or built from scratch.
.ie n .IP "$str = $entry\->\fBoutput()\fR" 4
.el .IP "\f(CW$str\fR = \f(CW$entry\fR\->\fBoutput()\fR" 4
.IX Item "$str = $entry->output()"
.PD 0
.ie n .IP """$entry""" 4
.el .IP "``$entry''" 4
.IX Item "$entry"
.PD
Get a string representation of the changelog entry.
.ie n .IP "$entry\->output($fh)" 4
.el .IP "\f(CW$entry\fR\->output($fh)" 4
.IX Item "$entry->output($fh)"
Print the string representation of the changelog entry to a
filehandle.
.ie n .IP "$entry\->get_part($part)" 4
.el .IP "\f(CW$entry\fR\->get_part($part)" 4
.IX Item "$entry->get_part($part)"
Return either a string (for a single line) or an array ref (for multiple
lines) corresponding to the requested part. \f(CW$part\fR can be
\&\*(L"header, \*(R"changes\*(L", \*(R"trailer\*(L", \*(R"blank_after_header\*(L",
\&\*(R"blank_after_changes\*(L", \*(R"blank_after_trailer".
.ie n .IP "$entry\->set_part($part, $value)" 4
.el .IP "\f(CW$entry\fR\->set_part($part, \f(CW$value\fR)" 4
.IX Item "$entry->set_part($part, $value)"
Set the value of the corresponding part. \f(CW$value\fR can be a string
or an array ref.
.ie n .IP "$entry\->extend_part($part, $value)" 4
.el .IP "\f(CW$entry\fR\->extend_part($part, \f(CW$value\fR)" 4
.IX Item "$entry->extend_part($part, $value)"
Concatenate \f(CW$value\fR at the end of the part. If the part is already a
multi-line value, \f(CW$value\fR is added as a new line otherwise it's
concatenated at the end of the current line.
.ie n .IP "$is_empty = $entry\->\fBis_empty()\fR" 4
.el .IP "\f(CW$is_empty\fR = \f(CW$entry\fR\->\fBis_empty()\fR" 4
.IX Item "$is_empty = $entry->is_empty()"
Returns 1 if the changelog entry doesn't contain anything at all.
Returns 0 as soon as it contains something in any of its non-blank
parts.
.ie n .IP "$entry\->\fBnormalize()\fR" 4
.el .IP "\f(CW$entry\fR\->\fBnormalize()\fR" 4
.IX Item "$entry->normalize()"
Normalize the content. Strip whitespaces at end of lines, use a single
empty line to separate each part.
.ie n .IP "$src = $entry\->\fBget_source()\fR" 4
.el .IP "\f(CW$src\fR = \f(CW$entry\fR\->\fBget_source()\fR" 4
.IX Item "$src = $entry->get_source()"
Return the name of the source package associated to the changelog entry.
.ie n .IP "$ver = $entry\->\fBget_version()\fR" 4
.el .IP "\f(CW$ver\fR = \f(CW$entry\fR\->\fBget_version()\fR" 4
.IX Item "$ver = $entry->get_version()"
Return the version associated to the changelog entry.
.ie n .IP "@dists = $entry\->\fBget_distributions()\fR" 4
.el .IP "\f(CW@dists\fR = \f(CW$entry\fR\->\fBget_distributions()\fR" 4
.IX Item "@dists = $entry->get_distributions()"
Return a list of target distributions for this version.
.ie n .IP "$fields = $entry\->\fBget_optional_fields()\fR" 4
.el .IP "\f(CW$fields\fR = \f(CW$entry\fR\->\fBget_optional_fields()\fR" 4
.IX Item "$fields = $entry->get_optional_fields()"
Return a set of optional fields exposed by the changelog entry.
It always returns a Dpkg::Control object (possibly empty though).
.ie n .IP "$urgency = $entry\->\fBget_urgency()\fR" 4
.el .IP "\f(CW$urgency\fR = \f(CW$entry\fR\->\fBget_urgency()\fR" 4
.IX Item "$urgency = $entry->get_urgency()"
Return the urgency of the associated upload.
.ie n .IP "$maint = $entry\->\fBget_maintainer()\fR" 4
.el .IP "\f(CW$maint\fR = \f(CW$entry\fR\->\fBget_maintainer()\fR" 4
.IX Item "$maint = $entry->get_maintainer()"
Return the string identifying the person who signed this changelog entry.
.ie n .IP "$time = $entry\->\fBget_timestamp()\fR" 4
.el .IP "\f(CW$time\fR = \f(CW$entry\fR\->\fBget_timestamp()\fR" 4
.IX Item "$time = $entry->get_timestamp()"
Return the timestamp of the changelog entry.
.ie n .IP "$time = $entry\->\fBget_timepiece()\fR" 4
.el .IP "\f(CW$time\fR = \f(CW$entry\fR\->\fBget_timepiece()\fR" 4
.IX Item "$time = $entry->get_timepiece()"
Return the timestamp of the changelog entry as a Time::Piece object.
.Sp
This function might return undef if there was no timestamp.
.ie n .IP "$str = $entry\->\fBget_dpkg_changes()\fR" 4
.el .IP "\f(CW$str\fR = \f(CW$entry\fR\->\fBget_dpkg_changes()\fR" 4
.IX Item "$str = $entry->get_dpkg_changes()"
Returns a string that is suitable for usage in a \f(CW\*(C`Changes\*(C'\fR field
in the output format of \f(CW\*(C`dpkg\-parsechangelog\*(C'\fR.
.SH "CHANGES"
.IX Header "CHANGES"
.SS "Version 1.01 (dpkg 1.18.8)"
.IX Subsection "Version 1.01 (dpkg 1.18.8)"
New method: \f(CW$entry\fR\->\fBget_timepiece()\fR.
.SS "Version 1.00 (dpkg 1.15.6)"
.IX Subsection "Version 1.00 (dpkg 1.15.6)"
Mark the module as public.
