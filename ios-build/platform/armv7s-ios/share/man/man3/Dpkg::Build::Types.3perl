.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dpkg::Build::Types 3perl"
.TH Dpkg::Build::Types 3perl "2019-03-09" "1.19.5-5-gba009" "libdpkg-perl"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dpkg::Build::Types \- track build types
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Dpkg::Build::Types module is used by various tools to track and decide
what artifacts need to be built.
.PP
The build types are bit constants that are exported by default. Multiple
types can be ORed.
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.IP "\s-1BUILD_DEFAULT\s0" 4
.IX Item "BUILD_DEFAULT"
This build is the default.
.IP "\s-1BUILD_SOURCE\s0" 4
.IX Item "BUILD_SOURCE"
This build includes source artifacts.
.IP "\s-1BUILD_ARCH_DEP\s0" 4
.IX Item "BUILD_ARCH_DEP"
This build includes architecture dependent binary artifacts.
.IP "\s-1BUILD_ARCH_INDEP\s0" 4
.IX Item "BUILD_ARCH_INDEP"
This build includes architecture independent binary artifacts.
.IP "\s-1BUILD_BINARY\s0" 4
.IX Item "BUILD_BINARY"
This build includes binary artifacts.
.IP "\s-1BUILD_FULL\s0" 4
.IX Item "BUILD_FULL"
This build includes source and binary artifacts.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "build_has_any($bits)" 4
.IX Item "build_has_any($bits)"
Return a boolean indicating whether the current build type has any of the
specified \f(CW$bits\fR.
.IP "build_has_all($bits)" 4
.IX Item "build_has_all($bits)"
Return a boolean indicating whether the current build type has all the
specified \f(CW$bits\fR.
.IP "build_has_none($bits)" 4
.IX Item "build_has_none($bits)"
Return a boolean indicating whether the current build type has none of the
specified \f(CW$bits\fR.
.IP "build_is($bits)" 4
.IX Item "build_is($bits)"
Return a boolean indicating whether the current build type is the specified
set of \f(CW$bits\fR.
.ie n .IP "set_build_type($build_type, $build_option, %opts)" 4
.el .IP "set_build_type($build_type, \f(CW$build_option\fR, \f(CW%opts\fR)" 4
.IX Item "set_build_type($build_type, $build_option, %opts)"
Set the current build type to \f(CW$build_type\fR, which was specified via the
\&\f(CW$build_option\fR command-line option.
.Sp
The function will check and abort on incompatible build type assignments,
this behavior can be disabled by using the boolean option \*(L"nocheck\*(R".
.ie n .IP "set_build_type_from_options($build_types, $build_option, %opts)" 4
.el .IP "set_build_type_from_options($build_types, \f(CW$build_option\fR, \f(CW%opts\fR)" 4
.IX Item "set_build_type_from_options($build_types, $build_option, %opts)"
Set the current build type from a list of comma-separated build type
components.
.Sp
The function will check and abort on incompatible build type assignments,
this behavior can be disabled by using the boolean option \*(L"nocheck\*(R".
.ie n .IP "set_build_type_from_targets($build_targets, $build_option, %opts)" 4
.el .IP "set_build_type_from_targets($build_targets, \f(CW$build_option\fR, \f(CW%opts\fR)" 4
.IX Item "set_build_type_from_targets($build_targets, $build_option, %opts)"
Set the current build type from a list of comma-separated build target
components.
.Sp
The function will check and abort on incompatible build type assignments,
this behavior can be disabled by using the boolean option \*(L"nocheck\*(R".
.IP "\fBget_build_options_from_type()\fR" 4
.IX Item "get_build_options_from_type()"
Get the current build type as a set of comma-separated string options.
.SH "CHANGES"
.IX Header "CHANGES"
.SS "Version 0.xx"
.IX Subsection "Version 0.xx"
This is a private module.
