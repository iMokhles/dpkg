.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dpkg::Deps::AND 3perl"
.TH Dpkg::Deps::AND 3perl "2019-03-09" "1.19.5-5-gba009" "libdpkg-perl"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dpkg::Deps::AND \- list of AND dependencies
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object represents a list of dependencies that must be met at the same
time. It inherits from Dpkg::Deps::Multiple.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$dep\->output([$fh])" 4
.el .IP "\f(CW$dep\fR\->output([$fh])" 4
.IX Item "$dep->output([$fh])"
The output method uses \*(L", \*(R" to join the list of sub-dependencies.
.ie n .IP "$dep\->implies($other_dep)" 4
.el .IP "\f(CW$dep\fR\->implies($other_dep)" 4
.IX Item "$dep->implies($other_dep)"
Returns 1 when \f(CW$dep\fR implies \f(CW$other_dep\fR. Returns 0 when \f(CW$dep\fR implies
\&\s-1NOT\s0($other_dep). Returns undef when there's no implication. \f(CW$dep\fR and
\&\f(CW$other_dep\fR do not need to be of the same type.
.ie n .IP "$dep\->get_evaluation($facts)" 4
.el .IP "\f(CW$dep\fR\->get_evaluation($facts)" 4
.IX Item "$dep->get_evaluation($facts)"
Evaluates the dependency given a list of installed packages and a list of
virtual packages provided. These lists are part of the Dpkg::Deps::KnownFacts
object given as parameters.
.Sp
Returns 1 when it's true, 0 when it's false, undef when some information
is lacking to conclude.
.ie n .IP "$dep\->simplify_deps($facts, @assumed_deps)" 4
.el .IP "\f(CW$dep\fR\->simplify_deps($facts, \f(CW@assumed_deps\fR)" 4
.IX Item "$dep->simplify_deps($facts, @assumed_deps)"
Simplifies the dependency as much as possible given the list of facts (see
object Dpkg::Deps::KnownFacts) and a list of other dependencies that are
known to be true.
.SH "CHANGES"
.IX Header "CHANGES"
.SS "Version 1.00 (dpkg 1.15.6)"
.IX Subsection "Version 1.00 (dpkg 1.15.6)"
Mark the module as public.
