.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dpkg::BuildProfiles 3perl"
.TH Dpkg::BuildProfiles 3perl "2019-03-09" "1.19.5-5-gba009" "libdpkg-perl"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dpkg::BuildProfiles \- handle build profiles
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Dpkg::BuildProfiles module provides functions to handle the build
profiles.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .IP "@profiles = \fBget_build_profiles()\fR" 4
.el .IP "\f(CW@profiles\fR = \fBget_build_profiles()\fR" 4
.IX Item "@profiles = get_build_profiles()"
Get an array with the currently active build profiles, taken from
the environment variable \fB\s-1DEB_BUILD_PROFILES\s0\fR.
.IP "set_build_profiles(@profiles)" 4
.IX Item "set_build_profiles(@profiles)"
Set \f(CW@profiles\fR as the current active build profiles, by setting
the environment variable \fB\s-1DEB_BUILD_PROFILES\s0\fR.
.ie n .IP "@profiles = parse_build_profiles($string)" 4
.el .IP "\f(CW@profiles\fR = parse_build_profiles($string)" 4
.IX Item "@profiles = parse_build_profiles($string)"
Parses a build profiles specification, into an array of array references.
.IP "evaluate_restriction_formula(\e@formula, \e@profiles)" 4
.IX Item "evaluate_restriction_formula(@formula, @profiles)"
Evaluate whether a restriction formula of the form \*(L"<foo bar> <baz>\*(R", given as
a nested array, is true or false, given the array of enabled build profiles.
.SH "CHANGES"
.IX Header "CHANGES"
.SS "Version 1.00 (dpkg 1.17.17)"
.IX Subsection "Version 1.00 (dpkg 1.17.17)"
Mark the module as public.
