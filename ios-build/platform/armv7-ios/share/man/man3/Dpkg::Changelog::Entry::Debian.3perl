.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dpkg::Changelog::Entry::Debian 3perl"
.TH Dpkg::Changelog::Entry::Debian 3perl "2019-03-09" "1.19.5-5-gba009" "libdpkg-perl"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dpkg::Changelog::Entry::Debian \- represents a Debian changelog entry
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object represents a Debian changelog entry. It implements the
generic interface Dpkg::Changelog::Entry. Only functions specific to this
implementation are described below.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "@items = $entry\->\fBget_change_items()\fR" 4
.el .IP "\f(CW@items\fR = \f(CW$entry\fR\->\fBget_change_items()\fR" 4
.IX Item "@items = $entry->get_change_items()"
Return a list of change items. Each item contains at least one line.
A change line starting with an asterisk denotes the start of a new item.
Any change line like "\f(CW\*(C`[ RaphaÃ«l Hertzog ]\*(C'\fR" is treated like an item of its
own even if it starts a set of items attributed to this person (the
following line necessarily starts a new item).
.ie n .IP "@errors = $entry\->\fBparse_header()\fR" 4
.el .IP "\f(CW@errors\fR = \f(CW$entry\fR\->\fBparse_header()\fR" 4
.IX Item "@errors = $entry->parse_header()"
.PD 0
.ie n .IP "@errors = $entry\->\fBparse_trailer()\fR" 4
.el .IP "\f(CW@errors\fR = \f(CW$entry\fR\->\fBparse_trailer()\fR" 4
.IX Item "@errors = $entry->parse_trailer()"
.PD
Return a list of errors. Each item in the list is an error message
describing the problem. If the empty list is returned, no errors
have been found.
.ie n .IP "$entry\->\fBcheck_header()\fR" 4
.el .IP "\f(CW$entry\fR\->\fBcheck_header()\fR" 4
.IX Item "$entry->check_header()"
Obsolete method. Use \fBparse_header()\fR instead.
.ie n .IP "$entry\->\fBcheck_trailer()\fR" 4
.el .IP "\f(CW$entry\fR\->\fBcheck_trailer()\fR" 4
.IX Item "$entry->check_trailer()"
Obsolete method. Use \fBparse_trailer()\fR instead.
.ie n .IP "$entry\->\fBnormalize()\fR" 4
.el .IP "\f(CW$entry\fR\->\fBnormalize()\fR" 4
.IX Item "$entry->normalize()"
Normalize the content. Strip whitespaces at end of lines, use a single
empty line to separate each part.
.ie n .IP "$src = $entry\->\fBget_source()\fR" 4
.el .IP "\f(CW$src\fR = \f(CW$entry\fR\->\fBget_source()\fR" 4
.IX Item "$src = $entry->get_source()"
Return the name of the source package associated to the changelog entry.
.ie n .IP "$ver = $entry\->\fBget_version()\fR" 4
.el .IP "\f(CW$ver\fR = \f(CW$entry\fR\->\fBget_version()\fR" 4
.IX Item "$ver = $entry->get_version()"
Return the version associated to the changelog entry.
.ie n .IP "@dists = $entry\->\fBget_distributions()\fR" 4
.el .IP "\f(CW@dists\fR = \f(CW$entry\fR\->\fBget_distributions()\fR" 4
.IX Item "@dists = $entry->get_distributions()"
Return a list of target distributions for this version.
.ie n .IP "$fields = $entry\->\fBget_optional_fields()\fR" 4
.el .IP "\f(CW$fields\fR = \f(CW$entry\fR\->\fBget_optional_fields()\fR" 4
.IX Item "$fields = $entry->get_optional_fields()"
Return a set of optional fields exposed by the changelog entry.
It always returns a Dpkg::Control object (possibly empty though).
.ie n .IP "$urgency = $entry\->\fBget_urgency()\fR" 4
.el .IP "\f(CW$urgency\fR = \f(CW$entry\fR\->\fBget_urgency()\fR" 4
.IX Item "$urgency = $entry->get_urgency()"
Return the urgency of the associated upload.
.ie n .IP "$maint = $entry\->\fBget_maintainer()\fR" 4
.el .IP "\f(CW$maint\fR = \f(CW$entry\fR\->\fBget_maintainer()\fR" 4
.IX Item "$maint = $entry->get_maintainer()"
Return the string identifying the person who signed this changelog entry.
.ie n .IP "$time = $entry\->\fBget_timestamp()\fR" 4
.el .IP "\f(CW$time\fR = \f(CW$entry\fR\->\fBget_timestamp()\fR" 4
.IX Item "$time = $entry->get_timestamp()"
Return the timestamp of the changelog entry.
.ie n .IP "$time = $entry\->\fBget_timepiece()\fR" 4
.el .IP "\f(CW$time\fR = \f(CW$entry\fR\->\fBget_timepiece()\fR" 4
.IX Item "$time = $entry->get_timepiece()"
Return the timestamp of the changelog entry as a Time::Piece object.
.Sp
This function might return undef if there was no timestamp.
.SH "UTILITY FUNCTIONS"
.IX Header "UTILITY FUNCTIONS"
.ie n .IP "$bool = match_header($line)" 4
.el .IP "\f(CW$bool\fR = match_header($line)" 4
.IX Item "$bool = match_header($line)"
Checks if the line matches a valid changelog header line.
.ie n .IP "$bool = match_trailer($line)" 4
.el .IP "\f(CW$bool\fR = match_trailer($line)" 4
.IX Item "$bool = match_trailer($line)"
Checks if the line matches a valid changelog trailing line.
.ie n .IP "@closed_bugs = find_closes($changes)" 4
.el .IP "\f(CW@closed_bugs\fR = find_closes($changes)" 4
.IX Item "@closed_bugs = find_closes($changes)"
Takes one string as argument and finds \*(L"Closes: #123456, #654321\*(R" statements
as supported by the Debian Archive software in it. Returns all closed bug
numbers in an array.
.SH "CHANGES"
.IX Header "CHANGES"
.SS "Version 1.03 (dpkg 1.18.8)"
.IX Subsection "Version 1.03 (dpkg 1.18.8)"
New methods: \f(CW$entry\fR\->\fBget_timepiece()\fR.
.SS "Version 1.02 (dpkg 1.18.5)"
.IX Subsection "Version 1.02 (dpkg 1.18.5)"
New methods: \f(CW$entry\fR\->\fBparse_header()\fR, \f(CW$entry\fR\->\fBparse_trailer()\fR.
.PP
Deprecated methods: \f(CW$entry\fR\->\fBcheck_header()\fR, \f(CW$entry\fR\->\fBcheck_trailer()\fR.
.SS "Version 1.01 (dpkg 1.17.2)"
.IX Subsection "Version 1.01 (dpkg 1.17.2)"
New functions: \fBmatch_header()\fR, \fBmatch_trailer()\fR
.PP
Deprecated variables: \f(CW$regex_header\fR, \f(CW$regex_trailer\fR
.SS "Version 1.00 (dpkg 1.15.6)"
.IX Subsection "Version 1.00 (dpkg 1.15.6)"
Mark the module as public.
