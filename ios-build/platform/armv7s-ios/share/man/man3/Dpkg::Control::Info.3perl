.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dpkg::Control::Info 3perl"
.TH Dpkg::Control::Info 3perl "2019-03-09" "1.19.5-5-gba009" "libdpkg-perl"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dpkg::Control::Info \- parse files like debian/control
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
It provides an object to access data of files that follow the same
syntax as \fIdebian/control\fR.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$c = Dpkg::Control::Info\->new(%opts)" 4
.el .IP "\f(CW$c\fR = Dpkg::Control::Info\->new(%opts)" 4
.IX Item "$c = Dpkg::Control::Info->new(%opts)"
Create a new Dpkg::Control::Info object. Loads the file from the filename
option, if no option is specified filename defaults to \fIdebian/control\fR.
If a scalar is passed instead, it will be used as the filename. If filename
is \*(L"\-\*(R", it parses the standard input. If filename is undef no loading will
be performed.
.ie n .IP "$c\->\fBreset()\fR" 4
.el .IP "\f(CW$c\fR\->\fBreset()\fR" 4
.IX Item "$c->reset()"
Resets what got read.
.ie n .IP "$c\->parse($fh, $description)" 4
.el .IP "\f(CW$c\fR\->parse($fh, \f(CW$description\fR)" 4
.IX Item "$c->parse($fh, $description)"
Parse a control file from the given filehandle. Exits in case of errors.
\&\f(CW$description\fR is used to describe the filehandle, ideally it's a filename
or a description of where the data comes from. It is used in error messages.
The data in the object is reset before parsing new control files.
.ie n .IP "$c\->load($file)" 4
.el .IP "\f(CW$c\fR\->load($file)" 4
.IX Item "$c->load($file)"
Load the content of \f(CW$file\fR. Exits in case of errors. If file is \*(L"\-\*(R", it
loads from the standard input.
.ie n .IP "$c\->[0]" 4
.el .IP "\f(CW$c\fR\->[0]" 4
.IX Item "$c->[0]"
.PD 0
.ie n .IP "$c\->\fBget_source()\fR" 4
.el .IP "\f(CW$c\fR\->\fBget_source()\fR" 4
.IX Item "$c->get_source()"
.PD
Returns a Dpkg::Control object containing the fields concerning the
source package.
.ie n .IP "$c\->get_pkg_by_idx($idx)" 4
.el .IP "\f(CW$c\fR\->get_pkg_by_idx($idx)" 4
.IX Item "$c->get_pkg_by_idx($idx)"
Returns a Dpkg::Control object containing the fields concerning the binary
package numbered \f(CW$idx\fR (starting at 1).
.ie n .IP "$c\->get_pkg_by_name($name)" 4
.el .IP "\f(CW$c\fR\->get_pkg_by_name($name)" 4
.IX Item "$c->get_pkg_by_name($name)"
Returns a Dpkg::Control object containing the fields concerning the binary
package named \f(CW$name\fR.
.ie n .IP "$c\->\fBget_packages()\fR" 4
.el .IP "\f(CW$c\fR\->\fBget_packages()\fR" 4
.IX Item "$c->get_packages()"
Returns a list containing the Dpkg::Control objects for all binary packages.
.ie n .IP "$str = $c\->output([$fh])" 4
.el .IP "\f(CW$str\fR = \f(CW$c\fR\->output([$fh])" 4
.IX Item "$str = $c->output([$fh])"
Return the content info into a string. If \f(CW$fh\fR is specified print it into
the filehandle.
.ie n .IP """$c""" 4
.el .IP "``$c''" 4
.IX Item "$c"
Return a string representation of the content.
.IP "@{$c}" 4
.IX Item "@{$c}"
Return a list of Dpkg::Control objects, the first one is corresponding to
source information and the following ones are the binary packages
information.
.SH "CHANGES"
.IX Header "CHANGES"
.SS "Version 1.01 (dpkg 1.18.0)"
.IX Subsection "Version 1.01 (dpkg 1.18.0)"
New argument: The \f(CW$c\fR\->\fBnew()\fR constructor accepts an \f(CW%opts\fR argument.
.SS "Version 1.00 (dpkg 1.15.6)"
.IX Subsection "Version 1.00 (dpkg 1.15.6)"
Mark the module as public.
