.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dpkg::Deps::KnownFacts 3perl"
.TH Dpkg::Deps::KnownFacts 3perl "2019-03-09" "1.19.5-5-gba009" "libdpkg-perl"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dpkg::Deps::KnownFacts \- list of installed real and virtual packages
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object represents a list of installed packages and a list of virtual
packages provided (by the set of installed packages).
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$facts = Dpkg::Deps::KnownFacts\->\fBnew()\fR;" 4
.el .IP "\f(CW$facts\fR = Dpkg::Deps::KnownFacts\->\fBnew()\fR;" 4
.IX Item "$facts = Dpkg::Deps::KnownFacts->new();"
Creates a new object.
.ie n .IP "$facts\->add_installed_package($package, $version, $arch, $multiarch)" 4
.el .IP "\f(CW$facts\fR\->add_installed_package($package, \f(CW$version\fR, \f(CW$arch\fR, \f(CW$multiarch\fR)" 4
.IX Item "$facts->add_installed_package($package, $version, $arch, $multiarch)"
Records that the given version of the package is installed. If
\&\f(CW$version\fR/$arch is undefined we know that the package is installed but we
don't know which version/architecture it is. \f(CW$multiarch\fR is the Multi-Arch
field of the package. If \f(CW$multiarch\fR is undef, it will be equivalent to
\&\*(L"Multi-Arch: no\*(R".
.Sp
Note that \f(CW$multiarch\fR is only used if \f(CW$arch\fR is provided.
.ie n .IP "$facts\->add_provided_package($virtual, $relation, $version, $by)" 4
.el .IP "\f(CW$facts\fR\->add_provided_package($virtual, \f(CW$relation\fR, \f(CW$version\fR, \f(CW$by\fR)" 4
.IX Item "$facts->add_provided_package($virtual, $relation, $version, $by)"
Records that the \*(L"$by\*(R" package provides the \f(CW$virtual\fR package. \f(CW$relation\fR
and \f(CW$version\fR correspond to the associated relation given in the Provides
field (if present).
.ie n .IP "($check, $param) = $facts\->check_package($package)" 4
.el .IP "($check, \f(CW$param\fR) = \f(CW$facts\fR\->check_package($package)" 4
.IX Item "($check, $param) = $facts->check_package($package)"
\&\f(CW$check\fR is one when the package is found. For a real package, \f(CW$param\fR
contains the version. For a virtual package, \f(CW$param\fR contains an array
reference containing the list of packages that provide it (each package is
listed as [ \f(CW$provider\fR, \f(CW$relation\fR, \f(CW$version\fR ]).
.Sp
This function is obsolete and should not be used. Dpkg::Deps::KnownFacts
is only meant to be filled with data and then passed to Dpkg::Deps
methods where appropriate, but it should not be directly queried.
.ie n .IP "$facts\->\fBevaluate_simple_dep()\fR" 4
.el .IP "\f(CW$facts\fR\->\fBevaluate_simple_dep()\fR" 4
.IX Item "$facts->evaluate_simple_dep()"
This method is private and should not be used except from within Dpkg::Deps.
.SH "CHANGES"
.IX Header "CHANGES"
.SS "Version 1.01 (dpkg 1.16.1)"
.IX Subsection "Version 1.01 (dpkg 1.16.1)"
New option: Dpkg::Deps::KnownFacts\->\fBadd_installed_package()\fR now accepts 2
supplementary parameters ($arch and \f(CW$multiarch\fR).
.PP
Deprecated method: Dpkg::Deps::KnownFacts\->\fBcheck_package()\fR is obsolete,
it should not have been part of the public \s-1API.\s0
.SS "Version 1.00 (dpkg 1.15.6)"
.IX Subsection "Version 1.00 (dpkg 1.15.6)"
Mark the module as public.
